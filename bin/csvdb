#!/usr/bin/perl

use strict;
use warnings;

#  2021-1010: Command line interface to the CSVDB module.

#  2021-1016: Make it run from the command line or interactively.

use Term::ReadLine;
use Getopt::Long;

use lib './lib';

use CSVDB;

my $base_prompt = 'csvdb > ';
my $prompt = $base_prompt;      #  Might show currently loaded file?

my $done = 0;
my $table;

my %cmds = (
    'q' => { exec => sub { $done = 1; }, short => 'Quit csvdb command line' },
    'h' => { exec => sub { help(); },    short => 'Show help' },
    'o' => {
        exec  => sub { my ($param) = @_; open_file( $param->[0], 1 ); },
        short => 'Open CSV file with header'
    },
    'op' => {
        exec  => sub { my ($param) = @_; open_file( $param->[0], 0 ); },
        short => 'Open CSV file without header (plain)'
    },
);

my %sql = (
    'select' => { exec => sub { &sql_select; }, short => 'Select records' },
);

my $filename;   # CSV filename
my $cmd_line;   # SQL command line

{
    if ( @ARGV ) {

        print "DEBUG: ARGV is " . join ( ' / ', @ARGV ) . "\n";

        GetOptions ( '0|open=s' => \$filename, 'E|execute=s' => \$cmd_line );

        if ( !defined $filename ) { print "ERROR: Must specify a filename.\n"; exit; }
        if ( !defined $cmd_line ) { print "ERROR: Must specify a command line,\n"; exit; }

        print "DEBUG: OK, we got a filename '$filename' and a command line '$cmd_line'.\n";

        open_file ( $filename, 1 );
        my @params = split ( / /, $cmd_line );

        my $cmd = shift @params;
        if ( $cmd eq 'select' ) {

            sql_select ( \@params );    #  Ugh .. why so much indirection?
        }

    } else {

        run_interactively();
    }
}

sub run_interactively
{
    my $term = Term::ReadLine->new('csvdb');

    print $prompt;
    my $input;

    while ( defined( $input = $term->readline($prompt) ) ) {

        # $input =~ s/\s+$//;

        print "DEBUG: input: $input\n";

        my @words = split( / /, $input );
        my $cmd = shift @words;

        #  We're dealing with two things here .. single letter commands (listed
        #  above in the cmds hash) and actual SQL operations (list in the sql
        #  hash). If they're not in either of the hashes, it's a bad command.

        if ( exists $cmds{ $cmd } ) {

            &{ $cmds{ $cmd }->{ exec } }( [ @words ] );
        }

        elsif ( exists $sql{ $cmd } ) {

            &{ $sql{ $cmd }->{ exec } }( [ @words ] );

        } else {

            print "ERROR: Didn't recognize the $cmd command.\n";
        }

        last if ($done);
    }
}

sub help
{
    print join( "\n", map { "$_ : $cmds{$_}->{short}"; } sort keys %cmds )
      . "\n";
}

sub open_file
{
    my ( $filename, $header_present ) = @_;
    
    if ( !defined ( $filename ) ) {

        print "ERROR: A CSV filename must be specified.\n";
        return;
    }

    if ( -e $filename ) {

        $table = CSVDB->new($filename, $header_present);

        if ( defined $table ) {

            print "INFO: $filename loaded.\n";

        } else {

            print "ERROR: Ugh, problems loading $filename: "
              . join( "\n", @CSVDB::errors ) . "\n";
        }
    }
}

sub sql_select
{
    my ( $params ) = @_;

    if ( !defined $table ) {

        print "ERROR: Oops, you need to open a CSV file first.\n";
        return;
    }

    #  The params can have a field list, separated by commas, and optinally a
    #  where clause and a limit clause (for now). Let's see if we can catch all
    #  of those eventualities.

    print "DEBUG: params are " . join ( ' / ', @$params ) . "\n";

    #  Field list ..

    my @fields;
    while ( my $p = shift @$params ) {

        print "DEBUG: Look at '$p'\n";

        if ( $p =~ /,/ ) {

            push( @fields, split( /,\s*/, $p ) );

        } else {

            if ( $p =~ /\w/ ) { push( @fields, $p ); last; }
        }
    }

    print "DEBUG: Fields are " . join ( ' / ', @fields ) . "\n";

    #  A 'select *' means we're getting everything .. so we don't need the
    #  fields parameter at all. That's detected by having nothing end up in the
    #  'fields' array.

    my %args;
    if ( @fields ) { %args = ( fields => \@fields );}

    if ( scalar @$params )
    { print "DEBUG: 202 remaining params are " . join ( ' / ', @$params ) . "\n"; }

    #  Order by clause (to come) ..

    #  Limit clause ..

    if ( defined $params->[0] && $params->[0] eq 'limit' ) {

        my $used = shift @$params;

        print "DEBUG: Limit is $params->[0]\n";
        $args{ limit } = $params->[0];

        $used = shift @$params;
    }

    if ( scalar @$params )
    { print "DEBUG: 217 remaining params are " . join ( ' / ', @$params ) . "\n"; }

    my $result = $table->select ( %args );

    foreach my $row ( @$result ) {

        print join ( "\t", @{ $row } ) . "\n";
    }
}
